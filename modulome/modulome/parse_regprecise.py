#!/usr/bin/env python3

def parse_regprecise(res, outfile='trn.csv', force=False):
    """
    Converts text results files generated by RegPrecise into csv files needed for iModulon enrichment.
    Parameters
    ----------
    res: str
        path to file containing the results of RegPrecise
    outfile: str; Default 'trn.csv'
        path to csv file where the output will be written
    force: bool; Default False
        whether to overwrite an existing file
    """
    import pandas as pd
    import os
    if not force and os.path.isfile(outfile):
        print('{} already exists. Pass True for force if you want to overwrite.'.format(outfile))
        return None
    if not outfile.endswith('.csv'):
        outfile += '.csv'
    
    
    trn = pd.DataFrame()
    count = 0
    with open(res, 'r') as trn_db:
        #get rid of empty lines
        all_lines = [l for l in (line.strip() for line in trn_db) if l]

        for lines in all_lines:
            #get the trn regulator information
            if lines.startswith('#'):
                trnl_type = lines.split(' ')[1]
                trnl_name = lines.split(' ')[3].replace(':', '')
                try:
                    trnl_id = lines.split(' ')[4]
                except IndexError:
                    trnl_id = ''            
            else:
                trn.loc[count, 'TF'] = trnl_name
                trn.loc[count, 'TF_id'] = trnl_id
                trn.loc[count, 'trn_type'] = trnl_type
                trn.loc[count, 'gene_name'] = lines.split('\t')[2]
                trn.loc[count, 'gene_id'] = lines.split('\t')[1]
                count += 1
    trn.to_csv(outfile)
if __name__ == '__main__':
    import argparse
    p = argparse.ArgumentParser(description='Converts text results files generated by RegPrecise into csv files needed for iModulon enrichment.')
    p.add_argument('res', help='path to file containing the results of RegPrecise', type=str)
    p.add_argument('outfile', help='name of the second BLAST database', type=str, default='trn.csv')
    p.add_argument('-f','--force', help='whether to overwrite an existing file',
                  default=False, type=bool)
    params = vars(p.parse_args())
    parse_regprecise(**params)
